import { useLazyQuery, useQuery } from "@apollo/client"
import { NavLink } from 'react-router-dom';
import { PropTypes } from "prop-types";
import { CircularProgress } from "@mui/material";
import InfiniteScroll from "react-infinite-scroller";
import "./Home.scss";
import { GET_POSTS } from "../../graphql/queries";
import TopLaunches from "../../components/home/top-launches/TopLaunches";
import PostCard from "../../components/common/post-card/PostCard";
import { useCallback, useEffect, useState } from "react";
// import TopPostsByPeriod from './TopPostsByPeriod';

const Home = ({ featured }) => {

  const [postsData, setPostsData] = useState([]);
  const [endCursor, setEndCursor] = useState(null);
  // const [fetchPosts, { loading, data, error }] = useLazyQuery(GET_POSTS, {
  //   variables: {
  //     "first": 10,
  //     "featured": !!featured,
  //     "order": "VOTES",
  //     "after": endCursor,
  //     "postedAfter": "2024-03-20",
  //   },
  // });

  // const { data, loading, error, fetchMore } = useQuery(GET_POSTS);

  const { data, error, fetchMore } = useQuery(GET_POSTS, {
    variables: {
      "first": 10,
      "featured": !!featured,
      "order": "VOTES",
      "after": endCursor,
      "postedAfter": "2024-03-20",
    },
    onCompleted: (data) => {
      setPostsData(prevPostsData => [...prevPostsData, ...data.posts.nodes]);
      setEndCursor(data.posts.pageInfo.endCursor);
    },
    keepPreviousData: true
  });
  // console.log("postsGroupedByDate :", postsGroupedByDate);
  // countTotalWeeksFromYear();
  // const cursorRef = useRef(null);

  // console.log('previousData :', previousData);

  // const fetchPostsData = useCallback(async () => {
  //   try {
  //     const { data } = await fetchPosts({
  //       variables: {
  //         "first": 10,
  //         "featured": !!featured,
  //         "order": "VOTES",
  //         "after": endCursor,
  //         "postedAfter": "2024-03-20",
  //       }
  //     });
  //     setPostsData(prevData => [...prevData, ...data.posts.nodes]);
  //     setEndCursor(data.posts.pageInfo.endCursor);
  //   } catch (error) {
  //     console.error('error :', error);
  //   }
  // }, [fetchPosts, featured, endCursor]);

  // useEffect(() => {
  //   console.log('useEffect');
  //   // fetchPostsData();
  // }, []);

  // const handleLoadMore = useCallback(() => {
  //   console.log('handleLoadMore-1');
  //   if (!loading && data && data.posts && data.posts.pageInfo.hasNextPage) {
  //     console.log('handleLoadMore-2');
  //     fetchMore({
  //       variables: {
  //         "first": 10,
  //         "featured": !!featured,
  //         "order": "VOTES",
  //         "after": endCursor,
  //         "postedAfter": "2024-03-20",
  //       },

  //     })
  //     // fetchPostsData();
  //   }
  // }, [fetchPostsData, loading, data]);

  const handleLoadMore = useCallback(() => {
    fetchMore({
      variables: {
        after: endCursor
      },
      updateQuery: (prev, { fetchMoreResult }) => {
        if (!fetchMoreResult) return prev;
        return {
          posts: {
            nodes: [...prev.posts.nodes, ...fetchMoreResult.posts.nodes],
            pageInfo: fetchMoreResult.posts.pageInfo
          }
        }
      },
      onCompleted: (data) => {
        setPostsData(prevPostsData => [...prevPostsData, ...data.posts.nodes]);
        setEndCursor(data.posts.pageInfo.endCursor);
      }
    });
  }, [endCursor, fetchMore]);

  if (error) return <p>Error: {error.message}</p>;
  const hasNextPage = !!data?.posts?.pageInfo?.hasNextPage;

  console.log('postsData :', postsData);

  return (
    <>
      <div className="home-container">
        <div className="heading">
          <p className="title">Top Products Launching Today</p>
          <div className="button-group">
            <NavLink to="/" className={({ isActive }) => isActive ? "category-btn active" : "category-btn"}>Featured</NavLink>
            <span>|</span>
            <NavLink to="/all" className={({ isActive }) => isActive ? "category-btn active" : "category-btn"}>All</NavLink>
          </div>
        </div>
        <InfiniteScroll
          className="posts-container"
          loadMore={handleLoadMore}
          hasMore={hasNextPage}
          loader={<CircularProgress />}
          // threshold={50} 
          initialLoad={false}>
          {postsData.map(post => <PostCard key={post.id} post={post} />)}
        </InfiniteScroll>
        {/* {!hasNextPage ?
          <>
            <TopPostsByPeriod
              featured={featured}
              title="Yesterday's Top Products"
              periodLabel="daily/2024/3/19"
              postedAfter="2024-03-19"
              postedBefore="2024-03-20"
            />
            <TopPostsByPeriod
              featured={featured}
              title="Last Week's Top Products"
              periodLabel="weekly/2024/11"
              postedAfter="2024-03-11"
              postedBefore="2024-03-17"
            />
            <TopPostsByPeriod
              featured={featured}
              title="Last Month's Top Products"
              periodLabel="monthly/2024/3"
              postedAfter="2024-03-1"
              postedBefore="2024-03-20"
            />
          </>
          : null} */}
      </div>
      <TopLaunches />
    </>
  )
}

export default Home;

Home.propTypes = {
  featured: PropTypes.bool
};

{/* {!hasNextPage ?
          <>
            <TopPostsByPeriod
              featured={featured}
              title="Yesterday's Top Products"
              periodLabel="daily/2024/3/19"
              postedAfter="2024-03-19"
              postedBefore="2024-03-20"
            />
            <TopPostsByPeriod
              featured={featured}
              title="Last Week's Top Products"
              periodLabel="weekly/2024/11"
              postedAfter="2024-03-11"
              postedBefore="2024-03-17"
            />
            <TopPostsByPeriod
              featured={featured}
              title="Last Month's Top Products"
              periodLabel="/monthly/2024/3"
              postedAfter="2024-03-1"
              postedBefore="2024-03-20"
            />
          </>
          : null} */}

/*
import { useLazyQuery } from "@apollo/client";
import { NavLink } from 'react-router-dom';
import { CircularProgress } from "@mui/material";
import InfiniteScroll from "react-infinite-scroller";
import "./Home.scss";
import TopLaunches from "../../components/home/top-launches/TopLaunches";
import PostCard from "../../components/common/post-card/PostCard";
import { useEffect, useState, useCallback } from "react";
import { PropTypes } from "prop-types";
import { GET_POSTS } from "../../graphql/queries";

const Home = ({ featured }) => {
  const [postsData, setPostsData] = useState([]);
  const [endCursor, setEndCursor] = useState(null);
  const [fetchPosts, { loading, data, error }] = useLazyQuery(GET_POSTS);

  useEffect(() => {
    fetchPostsData();
  }, []);

  const fetchPostsData = useCallback(async () => {
    try {
      const { data } = await fetchPosts({
        variables: {
          "first": 10,
          "featured": !!featured,
          "order": "VOTES",
          "after": endCursor,
          "postedAfter": "2024-03-20",
        }
      });
      setPostsData(prevPostsData => [
        ...prevPostsData,
        ...data.posts.nodes
      ]);
      setEndCursor(data.posts.pageInfo.endCursor);
    } catch (error) {
      console.error('error :', error);
    }
  }, [fetchPosts, endCursor, featured]);

  const handleLoadMore = useCallback(() => {
    if (!loading && data && data.posts && data.posts.pageInfo.hasNextPage) {
      fetchPostsData();
    }
  }, [fetchPostsData, loading, data]);

  if (error) return <p>Error: {error.message}</p>;

  return (
    <>
      <div className="home-container">
        <div className="heading">
          <p className="title">Top Products Launching Today</p>
          <div className="button-group">
            <NavLink to="/" className={({ isActive }) => isActive ? "category-btn active" : "category-btn"}>Featured</NavLink>
            <span>|</span>
            <NavLink to="/all" className={({ isActive }) => isActive ? "category-btn active" : "category-btn"}>All</NavLink>
          </div>
        </div>
        <InfiniteScroll
          className="posts-container"
          loadMore={handleLoadMore}
          hasMore={!!data?.posts?.pageInfo?.hasNextPage}
          loader={<CircularProgress />}
          threshold={50}
          initialLoad={false}>
          {postsData.map(post => <PostCard key={post.id} post={post} />)}
        </InfiniteScroll>
      </div>
      <TopLaunches />
    </>
  )
}

export default Home;

Home.propTypes = {
  featured: PropTypes.bool
};

*/ 